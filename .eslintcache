[{"C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\index.js":"1","C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\App.js":"2","C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\routes.js":"3","C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\paths.js":"4","C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\telas\\Index\\index.js":"5","C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\service\\provider\\RestProvider.js":"6","C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\service\\api.js":"7","C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\telas\\Dashboard\\index.js":"8","C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\components\\Dheader.js":"9","C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\telas\\Cardapio\\index.js":"10","C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\service\\provider\\CardapioProvider.js":"11","C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\telas\\Config\\index.js":"12","C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\telas\\Cliente\\index.js":"13","C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\components\\Cheader.js":"14","C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\telas\\ClienteConfig\\index.js":"15","C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\telas\\Cad\\index.js":"16"},{"size":203,"mtime":1609941705725,"results":"17","hashOfConfig":"18"},{"size":175,"mtime":1610231619866,"results":"19","hashOfConfig":"18"},{"size":838,"mtime":1610466022944,"results":"20","hashOfConfig":"18"},{"size":489,"mtime":1610466084278,"results":"21","hashOfConfig":"18"},{"size":7832,"mtime":1610459282590,"results":"22","hashOfConfig":"18"},{"size":2410,"mtime":1610462906059,"results":"23","hashOfConfig":"18"},{"size":380,"mtime":1610217170755,"results":"24","hashOfConfig":"18"},{"size":3182,"mtime":1610465431174,"results":"25","hashOfConfig":"18"},{"size":1633,"mtime":1610452043558,"results":"26","hashOfConfig":"18"},{"size":11348,"mtime":1610453960800,"results":"27","hashOfConfig":"18"},{"size":925,"mtime":1610395883913,"results":"28","hashOfConfig":"18"},{"size":7527,"mtime":1610457957511,"results":"29","hashOfConfig":"18"},{"size":4756,"mtime":1610462780628,"results":"30","hashOfConfig":"18"},{"size":1495,"mtime":1610458201442,"results":"31","hashOfConfig":"18"},{"size":3622,"mtime":1610459695399,"results":"32","hashOfConfig":"18"},{"size":9122,"mtime":1610465950867,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1jddr4o",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\index.js",[],["69","70"],"C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\App.js",[],"C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\routes.js",[],"C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\paths.js",[],"C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\telas\\Index\\index.js",["71"],"C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\service\\provider\\RestProvider.js",[],"C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\service\\api.js",[],"C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\telas\\Dashboard\\index.js",["72","73","74","75"],"C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\components\\Dheader.js",[],"C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\telas\\Cardapio\\index.js",["76","77","78","79","80","81","82","83","84"],"import React from 'react';\r\nimport './index.css';\r\nimport { Container, Row, Col, Button, Card, Modal, Form } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Helmet } from 'react-helmet';\r\nimport RestProvider from '../../service/provider/RestProvider.js';\r\nimport CardapioProvider from '../../service/provider/CardapioProvider.js';\r\nimport {useHistory} from 'react-router-dom';\r\nimport DHeader from '../../components/Dheader.js';\r\nimport imageCompression from 'browser-image-compression';\r\nfunction Cardapio({history}){\r\n    history=useHistory();\r\n    const [user, setUser] = React.useState(localStorage.getItem(\"user\"));\r\n    const [rest , setRest] = React.useState(null);\r\n    const [cardapio, setCardapio] = React.useState([]);\r\n    const [show, setShow] = React.useState(false);\r\n    const [show2, setShow2] = React.useState(false);\r\n    const [desc,setDesc] = React.useState(\"\");\r\n    const [image,setImage] = React.useState(\"\");\r\n    const [nome,setNome] = React.useState(\"\");\r\n    const [preco,setPreco] = React.useState(\"\");\r\n    const [state,setState] =React.useState({imgUpload: ''});\r\n    const [id,setID] =React.useState(\"\");\r\n    const [img64,setImg64]= React.useState(\"\");\r\n    const comidaClose = () => setShow(false);\r\n    const comidaShow = () => setShow(true);\r\n    const editcomidaClose = () => setShow2(false);\r\n    const editcomidaShow = () => setShow2(true);\r\n    const options = {\r\n        maxSizeMB: 0.01,\r\n        maxWidthOrHeight: 1024,\r\n        useWebWorker: true\r\n    }\r\n    React.useEffect(() => {\r\n        getData();\r\n        getCardapio();\r\n        if(!user){\r\n            history.push({pathname:\"/\"});\r\n        }\r\n    }, []);\r\n    async function getData(){\r\n        try{\r\n            let r = await RestProvider.getData();\r\n            setRest(r);\r\n            return r;\r\n        }catch(err){\r\n            throw err;\r\n        }\r\n    }\r\n    async function getCardapio(){\r\n        try{\r\n            let r = await CardapioProvider.getData();\r\n            console.log(r);\r\n            setCardapio(r);\r\n        }catch(err){\r\n            throw err;\r\n        }\r\n    }\r\n    async function add(){\r\n        try{\r\n            let file = document.getElementById('img').files[0];\r\n            let file_compress = await imageCompression(file, options);\r\n            let reader = new FileReader();\r\n            let img = null\r\n            reader.readAsDataURL(file_compress);\r\n            img=reader.result;\r\n            reader.onload = async () => {\r\n                img=reader.result;\r\n                let comida = {\r\n                    com_nome:nome,\r\n                    com_desc:desc,\r\n                    com_img:img,\r\n                    com_preco:preco.replace(',','.')\r\n                }\r\n                let r = await CardapioProvider.addComida(comida);\r\n                setCardapio(cardapio => [...cardapio, r]);\r\n                comidaClose();\r\n                alert(\"Comida adicionada com sucesso!\");\r\n            };\r\n            reader.onerror = function (error) {\r\n                console.log('Error: ', error);\r\n            }\r\n        }catch(err){\r\n            throw err;\r\n        }\r\n    }\r\n    async function delComida(id,key){\r\n        try{\r\n            let r = await CardapioProvider.delComida(id);\r\n            let cardapio_=cardapio;\r\n            cardapio_.splice(key,1);\r\n            setCardapio(cardapio_ => [...cardapio_]);\r\n        }catch(err){\r\n            throw err;\r\n        }\r\n    }\r\n    async function edit(cid){\r\n        if(image){\r\n            try{\r\n                let file = document.getElementById('img').files[0];\r\n                let file_compress = await imageCompression(file, options);\r\n                let reader = new FileReader();\r\n                let img = null\r\n                reader.readAsDataURL(file_compress);\r\n                img=reader.result;\r\n                reader.onload = async () => {\r\n                    img=reader.result;\r\n                    let comida = {\r\n                        com_nome:nome,\r\n                        com_desc:desc,\r\n                        com_img:img,\r\n                        com_preco:preco.replace(',','.')\r\n                    }\r\n                    let r = await CardapioProvider.editComida(cid,comida);\r\n                    editcomidaClose();\r\n                    alert(\"Comida editada com sucesso!\");\r\n                };\r\n                reader.onerror = function (error) {\r\n                    console.log('Error: ', error);\r\n                }\r\n            }catch(err){\r\n                throw err;\r\n            }\r\n        }else{\r\n            try{\r\n                let comida = {\r\n                    com_nome:nome,\r\n                    com_desc:desc,\r\n                    com_img:img64,\r\n                    com_preco:preco.replace(',','.')\r\n                }\r\n                let r = await CardapioProvider.editComida(cid,comida);\r\n                setCardapio(cardapio => [...cardapio, r]);\r\n                comidaClose();\r\n                alert(\"Comida editada com sucesso!\");\r\n            }catch(err){\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n    function editComida(item){   \r\n        setDesc(item.com_desc);\r\n        setImage(null);\r\n        setImg64(item.com_img);\r\n        setNome(item.com_nome);\r\n        setPreco(item.com_preco.toString().replace(\".\",\",\"));\r\n        setID(item.com_ID);\r\n        editcomidaClose();\r\n    }\r\n    return(\r\n        <Container fluid className=\"bgimgfull\">\r\n            <Helmet>\r\n                {rest && rest.rest_nome ? (\r\n                    <title>{rest.rest_nome} - Cardapio</title>\r\n                ):(\r\n                    <title>Cardapio</title>\r\n                )}\r\n            </Helmet>\r\n            <DHeader dado={{rest:rest,user:user}}/>\r\n            <main>\r\n                <Row>\r\n                    <Col className=\"text-center\">\r\n                        <Row>\r\n                            <Col sm=\"12\" lg=\"2\">\r\n                                <Button variant=\"outline-success\" onClick={comidaShow}>Adicionar comida</Button>\r\n                            </Col>\r\n                            <Row>\r\n                                {cardapio.map((item, key) => (\r\n                                    <Col>\r\n                                        <Card>\r\n                                            <Card.Header>\r\n                                                {item.com_nome}\r\n                                            </Card.Header>\r\n                                            <Card.Body>\r\n                                                <Card.Title>\r\n                                                    <img src={item.com_img} width=\"150px\" height=\"150px\" />\r\n                                                </Card.Title>\r\n                                                <Card.Text>\r\n                                                    R$ {item.com_preco.toString().replace(\".\",\",\")}\r\n                                                </Card.Text>\r\n                                                <Card.Text>\r\n                                                    {item.com_desc}\r\n                                                </Card.Text>\r\n                                                <Card.Footer>\r\n                                                    <a className=\"btn btn-outline-info\" onClick={()=>editComida(item)}>Editar comida</a>\r\n                                                    <Button variant=\"outline-danger\" onClick={()=>delComida(item.com_ID, key)}>Excluir comida</Button>\r\n                                                </Card.Footer>\r\n                                            </Card.Body>\r\n                                        </Card>\r\n                                    </Col>\r\n                                ))}\r\n                            </Row>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n            </main>\r\n            <Modal show={show} onHide={comidaClose} className=\"fade\">\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Adicionar comida</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form>\r\n                        <Form.Group>\r\n                            <Form.Label>Nome</Form.Label>\r\n                            <Form.Control name=\"nome\" type=\"text\" value={nome} onChange={(event)=>{setNome(event.target.value)}} required=\"required\"/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Preço</Form.Label>\r\n                            <Form.Control name=\"preco\" type=\"text\" value={preco} onChange={(event)=>{setPreco(event.target.value)}} required=\"required\"/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Descrição</Form.Label>\r\n                            <Form.Control name=\"desc\" type=\"text\" value={desc} onChange={(event)=>{setDesc(event.target.value)}} required=\"required\"/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Foto</Form.Label>\r\n                            <Form.File label=\"Image\" data-browse=\"Buscar\" custom value={image} onChange={(event)=>{setImage(event.target.value)}}/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Button variant=\"success\" onClick={()=>{add()}}>Adicionar</Button>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n            </Modal>\r\n            <Modal show={show2} onHide={editcomidaClose} className=\"fade\">\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Editar comida</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form>\r\n                        <Form.Group>\r\n                            <Form.Label>Nome</Form.Label>\r\n                            <Form.Control name=\"nome\" type=\"text\" value={nome} onChange={(event)=>{setNome(event.target.value)}} required=\"required\"/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Preço</Form.Label>\r\n                            <Form.Control name=\"preco\" type=\"text\" value={preco} onChange={(event)=>{setPreco(event.target.value)}} required=\"required\"/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Descrição</Form.Label>\r\n                            <Form.Control name=\"desc\" type=\"text\" value={desc} onChange={(event)=>{setDesc(event.target.value)}} required=\"required\"/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Imagem</Form.Label>\r\n                            <Form.File name=\"img\" type=\"file\" id=\"img\" value={image} onChange={(event)=>{setImage(event.target.value)}} required=\"required\"/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Button variant=\"success\" onClick={()=>{edit(id)}}>Salvar</Button>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </Container>\r\n    );\r\n}\r\nexport default Cardapio;","C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\service\\provider\\CardapioProvider.js",[],"C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\telas\\Config\\index.js",["85","86"],"import React from 'react';\r\nimport './index.css';\r\nimport { Container, Row, Col, Button, Form } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Helmet } from 'react-helmet';\r\nimport RestProvider from '../../service/provider/RestProvider.js';\r\nimport {useHistory} from 'react-router-dom';\r\nimport DHeader from '../../components/Dheader.js';\r\nimport imageCompression from 'browser-image-compression';\r\nfunction Config({history}){\r\n    history=useHistory();\r\n    const [user, setUser] = React.useState(localStorage.getItem(\"user\"));\r\n    const [rest , setRest] = React.useState(null);\r\n    const [rnome, setRnome] = React.useState(\"\");\r\n    const [rdesc, setRdesc] = React.useState(\"\");\r\n    const [rlogo, setRlogo] = React.useState(\"\");\r\n    const [gnome, setGnome] = React.useState(user.pes_nome);\r\n    const [gemail, setGemail] = React.useState(user.pes_email);\r\n    const [gsenha, setGsenha] = React.useState(user.pes_senha);\r\n    const [gfone, setGfone] = React.useState(user.pes_fone);\r\n    const options = {\r\n        maxSizeMB: 0.01,\r\n        maxWidthOrHeight: 1024,\r\n        useWebWorker: true\r\n    }\r\n    React.useEffect(() => {\r\n        getData();\r\n        if(!user){\r\n            history.push({pathname:\"/\"});\r\n        }\r\n    }, []);\r\n    async function getData(){\r\n        try{\r\n            let r = await RestProvider.getData();\r\n            let g = await RestProvider.getGen();\r\n            setRest(r);\r\n            setRnome(r.rest_nome);\r\n            setRdesc(r.rest_desc);\r\n            setUser(g);\r\n            setGnome(g.pes_nome);\r\n            setGemail(g.pes_email);\r\n            setGsenha(g.pes_senha);\r\n            setGfone(g.pes_fone);\r\n            return r;\r\n        }catch(err){\r\n            throw err;\r\n        }\r\n    }\r\n    async function Rsave(){\r\n        try{\r\n            let file = document.getElementById('logo').files[0];\r\n            if(file){\r\n                let file_compress = await imageCompression(file, options);\r\n                let reader = new FileReader();\r\n                let img = null;\r\n                reader.readAsDataURL(file_compress);\r\n                img=reader.result;\r\n                reader.onload = async () => {\r\n                    img=reader.result;\r\n                    let rest = {\r\n                        rest_nome:rnome,\r\n                        rest_desc:rdesc,\r\n                        rest_logo:img\r\n                    }\r\n                    let r = await RestProvider.save(rest);\r\n                    setRest(r);\r\n                    alert(\"Dados salvo com sucesso!\");\r\n                };\r\n                reader.onerror = function (error) {\r\n                    console.log('Error: ', error);\r\n                }\r\n            }else{\r\n                let rest = {\r\n                    rest_nome:rnome,\r\n                    rest_desc:rdesc,\r\n                    rest_logo:rest.rest_logo\r\n                }\r\n                let r = await RestProvider.save(rest);\r\n                setRest(r);\r\n                alert(\"Dados salvo com sucesso!\");\r\n            }\r\n        }catch(err){\r\n            throw err;\r\n        }\r\n    }\r\n    async function Gsave(){\r\n        try{\r\n            let data={\r\n                pes_nome:gnome,\r\n                pes_email:gemail,\r\n                pes_senha:gsenha,\r\n                pes_fone:gfone\r\n            }\r\n            let r = await RestProvider.gen_save(data);\r\n            setUser(r);\r\n            localStorage.setItem(\"user\",r);\r\n            alert(\"Dados salvo com sucesso!\");\r\n        }catch(err){\r\n            throw err;\r\n        }\r\n    }\r\n    return(\r\n        <Container fluid className=\"bgimgfull\">\r\n            <Helmet>\r\n                {rest && rest.rest_nome ? (\r\n                    <title>{rest.rest_nome} - Configuração</title>\r\n                ):(\r\n                    <title>Configuração</title>\r\n                )}\r\n            </Helmet>\r\n            <DHeader dado={{rest:rest,user:user}}/>\r\n            <main>\r\n                <Row>\r\n                    <Col className=\"text-center cmain justify-content-center\">\r\n                        <Row>\r\n                            <Col sm=\"12\" lg=\"6\" className=\"pd5\">\r\n                                <Form>\r\n                                    <h3>Dados do restaurante</h3>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Nome do restaurante</Form.Label>\r\n                                        <Form.Control name=\"rnome\" type=\"text\" value={rnome} onChange={(event)=>{setRnome(event.target.value)}}/>\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Descrição do restaurante</Form.Label>\r\n                                        <Form.Control as=\"textarea\" name=\"rdesc\" value={rdesc} onChange={(event)=>{setRdesc(event.target.value)}}/>\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Logo marca do restaurante</Form.Label>\r\n                                        <Form.File label=\"Logo marca\" data-browse=\"Buscar\" id=\"logo\" custom value={rlogo} onChange={(event)=>{setRlogo(event.target.value)}}/>\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Button variant=\"outline-success\" onClick={()=>{Rsave()}}>Salvar</Button>\r\n                                    </Form.Group>\r\n                                </Form>\r\n                            </Col>\r\n                            <Col sm=\"12\" lg=\"6\" className=\"pd5\">\r\n                                <Form>\r\n                                    <h3>Dados do gerente</h3>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Nome</Form.Label>\r\n                                        <Form.Control name=\"gnome\" type=\"text\" value={gnome} onChange={(event)=>{setGnome(event.target.value)}}/>\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Email</Form.Label>\r\n                                        <Form.Control name=\"gemail\" type=\"email\" value={gemail} onChange={(event)=>{setGemail(event.target.value)}}/>\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Telefone</Form.Label>\r\n                                        <Form.Control name=\"gfone\" type=\"text\" value={gfone} onChange={(event)=>{setGfone(event.target.value)}}/>\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Senha</Form.Label>\r\n                                        <Form.Control name=\"gsenha\" type=\"password\" value={gsenha} onChange={(event)=>{setGsenha(event.target.value)}}/>\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Button variant=\"outline-success\" onClick={()=>{Gsave()}}>Salvar</Button>\r\n                                    </Form.Group>\r\n                                </Form>\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n            </main>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Config;","C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\telas\\Cliente\\index.js",["87","88","89","90","91"],"C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\components\\Cheader.js",[],"C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\telas\\ClienteConfig\\index.js",["92","93"],"C:\\Users\\Diego\\Documents\\pw1\\genrest-site\\src\\telas\\Cad\\index.js",["94","95","96","97"],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":41,"column":17,"nodeType":"104","messageId":"105","endLine":41,"endColumn":18},{"ruleId":"102","severity":1,"message":"106","line":11,"column":18,"nodeType":"104","messageId":"105","endLine":11,"endColumn":25},{"ruleId":"107","severity":1,"message":"108","line":20,"column":8,"nodeType":"109","endLine":20,"endColumn":10,"suggestions":"110"},{"ruleId":"102","severity":1,"message":"103","line":41,"column":17,"nodeType":"104","messageId":"105","endLine":41,"endColumn":18},{"ruleId":"111","severity":1,"message":"112","line":52,"column":9,"nodeType":"113","messageId":"114","endLine":61,"endColumn":10},{"ruleId":"102","severity":1,"message":"106","line":13,"column":18,"nodeType":"104","messageId":"105","endLine":13,"endColumn":25},{"ruleId":"102","severity":1,"message":"115","line":22,"column":12,"nodeType":"104","messageId":"105","endLine":22,"endColumn":17},{"ruleId":"102","severity":1,"message":"116","line":22,"column":18,"nodeType":"104","messageId":"105","endLine":22,"endColumn":26},{"ruleId":"102","severity":1,"message":"117","line":28,"column":11,"nodeType":"104","messageId":"105","endLine":28,"endColumn":25},{"ruleId":"107","severity":1,"message":"108","line":40,"column":8,"nodeType":"109","endLine":40,"endColumn":10,"suggestions":"118"},{"ruleId":"102","severity":1,"message":"103","line":89,"column":17,"nodeType":"104","messageId":"105","endLine":89,"endColumn":18},{"ruleId":"102","severity":1,"message":"103","line":114,"column":25,"nodeType":"104","messageId":"105","endLine":114,"endColumn":26},{"ruleId":"119","severity":1,"message":"120","line":176,"column":53,"nodeType":"121","endLine":176,"endColumn":108},{"ruleId":"122","severity":1,"message":"123","line":185,"column":53,"nodeType":"121","endLine":185,"endColumn":120},{"ruleId":"107","severity":1,"message":"108","line":31,"column":8,"nodeType":"109","endLine":31,"endColumn":10,"suggestions":"124"},{"ruleId":"125","severity":1,"message":"126","line":76,"column":31,"nodeType":"104","messageId":"127","endLine":76,"endColumn":35},{"ruleId":"102","severity":1,"message":"106","line":11,"column":18,"nodeType":"104","messageId":"105","endLine":11,"endColumn":25},{"ruleId":"102","severity":1,"message":"128","line":12,"column":16,"nodeType":"104","messageId":"105","endLine":12,"endColumn":21},{"ruleId":"107","severity":1,"message":"129","line":25,"column":8,"nodeType":"109","endLine":25,"endColumn":10,"suggestions":"130"},{"ruleId":"111","severity":1,"message":"112","line":57,"column":9,"nodeType":"113","messageId":"114","endLine":66,"endColumn":10},{"ruleId":"102","severity":1,"message":"103","line":71,"column":17,"nodeType":"104","messageId":"105","endLine":71,"endColumn":18},{"ruleId":"102","severity":1,"message":"128","line":12,"column":16,"nodeType":"104","messageId":"105","endLine":12,"endColumn":21},{"ruleId":"107","severity":1,"message":"131","line":22,"column":8,"nodeType":"109","endLine":22,"endColumn":10,"suggestions":"132"},{"ruleId":"102","severity":1,"message":"106","line":11,"column":18,"nodeType":"104","messageId":"105","endLine":11,"endColumn":25},{"ruleId":"107","severity":1,"message":"108","line":30,"column":8,"nodeType":"109","endLine":30,"endColumn":10,"suggestions":"133"},{"ruleId":"102","severity":1,"message":"103","line":57,"column":17,"nodeType":"104","messageId":"105","endLine":57,"endColumn":18},{"ruleId":"119","severity":1,"message":"120","line":125,"column":49,"nodeType":"121","endLine":125,"endColumn":104},"no-native-reassign",["134"],"no-negated-in-lhs",["135"],"no-unused-vars","'r' is assigned a value but never used.","Identifier","unusedVar","'setUser' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'history' and 'user'. Either include them or remove the dependency array.","ArrayExpression",["136"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'state' is assigned a value but never used.","'setState' is assigned a value but never used.","'editcomidaShow' is assigned a value but never used.",["137"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["138"],"no-use-before-define","'rest' was used before it was defined.","usedBeforeDefined","'setID' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'getReservas', 'history', and 'user'. Either include them or remove the dependency array.",["139"],"React Hook React.useEffect has missing dependencies: 'getData', 'history', and 'user'. Either include them or remove the dependency array.",["140"],["141"],"no-global-assign","no-unsafe-negation",{"desc":"142","fix":"143"},{"desc":"142","fix":"144"},{"desc":"142","fix":"145"},{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},{"desc":"142","fix":"150"},"Update the dependencies array to be: [history, user]",{"range":"151","text":"152"},{"range":"153","text":"152"},{"range":"154","text":"152"},"Update the dependencies array to be: [getReservas, history, user]",{"range":"155","text":"156"},"Update the dependencies array to be: [getData, history, user]",{"range":"157","text":"158"},{"range":"159","text":"152"},[757,759],"[history, user]",[1686,1688],[1271,1273],[1037,1039],"[getReservas, history, user]",[915,917],"[getData, history, user]",[1307,1309]]